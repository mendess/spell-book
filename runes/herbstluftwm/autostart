#!/bin/bash
exec 2>&1
set -x
hc=herbstclient

trap 'herbstclient unlock' EXIT


CACHE_DIR="/tmp/$LOGNAME"
mkdir -p "$CACHE_DIR"

daemonise() { (
    set +x
    # Close all but stdio
    local self=$BASHPID
    [[ "$1" = sxhkd ]] && find /proc/$self/fd -type l -printf '%f\n'
    # The following will even try to close the fd for the find sub
    # shell although it is already closed. (0: stdin, 1: stdout, 2:
    # stderr, 3: find)
    while read -r n; do
        if ((n > 2)); then
            [[ "$1" = sxhkd ]] && echo "closing $n"
            eval "exec $n>&-"
        fi
    done < <(find /proc/$self/fd -type l -printf '%f\n')
    "$@" &
); }

$hc emit_hook reload
$hc lock

# remove all existing keybindings
$hc keyunbind --all

Mod=Mod4 # Use the super key as the main modifier

$hc keybind $Mod-Shift-q close_or_remove
$hc keybind $Mod-Control-q remove
$hc keybind $Mod-Shift-F5 reload
case "$(hostname)" in
    3QWP3T3)
        $hc keybind $Mod-Control-Shift-F5 spawn dell-toggle-dock
        ;;
esac

# basic movement in tiling and floating mode
# focusing clients
$hc keybind $Mod-h focus left
$hc keybind $Mod-j focus down
$hc keybind $Mod-k focus up
$hc keybind $Mod-l focus right

# moving clients in tiling and floating mode
$hc keybind $Mod-Shift-h shift left
$hc keybind $Mod-Shift-j shift down
$hc keybind $Mod-Shift-k shift up
$hc keybind $Mod-Shift-l shift right

# splitting frames
# create an empty frame at the specified direction
$hc keybind $Mod-u chain , split bottom 0.5 , focus down
$hc keybind $Mod-Shift-u chain , split right 0.5 , focus right
# let the current frame explode into subframes
$hc keybind $Mod-Control-space split explode

# resizing frames and floating clients
resizestep=0.02
$hc keybind $Mod-Control-h resize left +$resizestep
$hc keybind $Mod-Control-j resize down +$resizestep
$hc keybind $Mod-Control-k resize up +$resizestep
$hc keybind $Mod-Control-l resize right +$resizestep

# previous tab
$hc keybind $Mod-Tab use_previous

# layouting
$hc keybind $Mod-Shift-space set_attr clients.focus.floating toggle
$hc keybind $Mod-f fullscreen toggle
# $hc keybind $Mod-Shift-m set_attr clients.focus.minimized true
# # restore all minimized windows of the focused tag
# $hc keybind $Mod-Ctrl-m foreach CLIENT clients. \
#     sprintf MINATT "%c.minimized" CLIENT \
#     sprintf TAGATT "%c.tag" CLIENT and \
#     , compare MINATT "=" "true" \
#     , substitute FOCUS "tags.focus.name" compare TAGATT "=" FOCUS \
#     , set_attr MINATT false
#$hc keybind $Mod-apostrophe pseudotile toggle
$hc keybind $Mod-apostrophe or \
    ^ and \
        + new_attr bool tags.focus.my_pseudo_tiled \
        + chain \
            . split left 0.25 \
            . focus left \
            . set_layout vertical \
            . focus right \
            . split right 0.67 \
            . focus right \
            . set_layout vertical \
            . focus left \
    ^ and \
        + remove_attr tags.focus.my_pseudo_tiled \
        + chain \
            . focus_edge -i right \
            . remove \
            . focus_edge -i left \
            . remove

$hc keybind $Mod-Shift-apostrophe spawn bash -c "
termFromHere
$hc chain . split right 0.65 . shift right . set_layout vertical
"

$hc keybind $Mod-F7 chain \
    + lock \
    + or \
        , and \
            . compare settings.frame_border_width = 0 \
            . attr settings.frame_border_width 1 \
            . attr settings.frame_gap 1 \
        , chain \
            . attr settings.frame_border_width 0 \
            . attr settings.frame_gap 2 \
    + unlock
$hc keybind $Mod-i spawn "$(dirname "$0")/scratchpad"
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
$hc keybind $Mod-e or \
    , and \
        . compare tags.focus.curframe_wcount = 2 \
        . cycle_layout +1 vertical horizontal max vertical grid \
    , cycle_layout +1
$hc keybind $Mod-Shift-r rotate

# mouse
$hc mouseunbind --all
$hc mousebind $Mod-Button1 move
$hc mousebind $Mod-Button2 resize
$hc mousebind $Mod-Button3 zoom

# focus
# $hc keybind $Mod-BackSpace cycle_monitor
# $hc keybind $Mod-Tab cycle_all +1
# $hc keybind $Mod-Shift-Tab cycle_all -1
$hc keybind $Mod-r cycle
# $hc keybind $Mod-i jumpto urgent

# theme
$hc attr theme.tiling.reset 1
$hc attr theme.floating.reset 1
mapfile -t colors < <(awk '{print $1}' "$CACHE_DIR/wall_colors")
$hc attr theme.active.color "${colors[0]}"
$hc attr theme.normal.color "${colors[2]}"
$hc attr settings.frame_border_active_color "${colors[0]}"
$hc attr settings.frame_border_normal_color "${colors[1]}"
$hc attr settings.frame_bg_normal_color '#565656'
$hc attr settings.frame_bg_active_color '#345F0C'
$hc attr settings.frame_border_width 0
$hc attr settings.always_show_frame on
$hc attr settings.frame_bg_transparent on
$hc attr settings.frame_active_opacity 0
$hc attr settings.frame_normal_opacity 100
$hc attr settings.frame_transparent_width 0
$hc attr settings.frame_gap 2
if [[ "$(hostname)" = tolaria ]]; then
    $hc attr settings.window_gap 7
    $hc attr theme.border_width 5
else
    $hc attr settings.window_gap 4
    $hc attr theme.border_width 3
fi
$hc attr settings.frame_padding 0
$hc attr settings.smart_window_surroundings off
$hc attr settings.smart_frame_surroundings on
$hc attr settings.mouse_recenter_gap 0
#$hc attr settings.swap_monitors_to_get_tag false
$hc attr settings.swap_monitors_to_get_tag true

$hc attr theme.title_height 0

#$hc attr theme.padding_top 0 # space below the title's baseline (i.e. text depth)
#$hc attr theme.active.color '#9fbc00'
#$hc attr theme.normal.color '#454545'
$hc attr theme.urgent.color orange
$hc attr theme.inner_width 0
$hc attr theme.outer_width 0

# rules
$hc unrule -F
#$hc rule class=XTerm tag=3 # move all xterms to tag 3
$hc rule focus=on # normally focus new clients
$hc rule floatplacement=center
#$hc rule focus=off # normally do not focus new clients
# give focus to most common terminals
#$hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
$hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' floating=on
$hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
$hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off
$hc rule instance='scratchpad' floating=on
$hc rule instance='floating-terminal' floating=on
$hc rule instance='sxiv' floating=on
$hc rule instance='nsxiv' floating=on
$hc rule title~'.* Steam' instance=Steam floating=on
$hc rule title~'Steam .*' instance=Steam floating=on
$hc rule title~'.* Steam .*' instance=Steam floating=on
$hc rule title~'Properties .*' instance=Steam floating=on
$hc rule class='steam_app_782330' tag=9
$hc rule title~'Android Emulator .*' floating=on

$hc set tree_style '╾│ ├└╼─┐'

monitors=()

is_taken() {
    target="$(echo "$1" | cut -d+ -f2-)"
    shift
    for m in "$@"; do
        if [[ "$(echo "$m" | cut -d+ -f2-)" = "$target" ]]; then
            return 0
        fi
    done
    return 1
}

# tags
tag_names=({1..9} 0)
tag_keys=({1..9} 0)

# Replace the default section for tags in your autostart by the following:
# This is the default tag section of the autostart, with a single change:
# In the use_index keybinding, check the presence of the my_monitor attribute,
# before focusing the desired tag.
$hc rename default "${tag_names[0]}" || true
for i in "${!tag_names[@]}"; do
    if ! $hc attr "tags.$i" &>/dev/null; then
        $hc add "${tag_names[$i]}"
    fi
    key="${tag_keys[$i]}"
    if [[ "$key" ]]; then
        # first check if the tag is locked to some monitor.
        # if so, first focus the monitor
        $hc keybind "$Mod-$key" chain \
            , silent substitute M tags."$i".my_monitor focus_monitor M \
            , use_index "$i"
        $hc keybind "$Mod-Shift-$key" chain \
            , move_index "$i" \
            , silent substitute M tags."$i".my_monitor focus_monitor M \
            , use_index "$i"
        $hc keybind "$Mod-Control-$key" move_index "$i"
    fi
done

# do multi monitor setup here, e.g.:
# $hc set_monitors 1280x1024+0+0 1280x1024+1280+0
# or simply:
$hc detect_monitors

mapfile -t monitors < <(xrandr --listmonitors | awk '{print $4}' | sed 1d)
printf "detected %s\n" "${#monitors[@]}"
printf "\t%s" "${monitors[@]}"

resolution=$(xrandr | awk '
screen && $0 ~ /\*/ {
    if ($1 == "3440x1440") {
        print("not-4K")
    } else {
        print("4K")
    }
}
$2 == "connected" { screen=$1 }
$2 == "disconnected" { screen="" }')
if [[ "$(xrandr | grep ' connected' -c)" -gt 1 ]]; then
    docked=1
fi
case "$(uname -n)" in
    3QWP3T3)
        if [[ "$resolution" = "4K" ]]; then
            extra_height=16
        else
            extra_height=0
        fi
        ;;
    *)
        extra_height=0
        ;;
esac

# Statically define which tag should be send to which monitor
lock_tag_to_monitor() {
    local mon="$1"
    shift
    for t in "$@"; do
        herbstclient chain \
            , try new_attr string tags."$t".my_monitor \
            , set_attr tags."$t".my_monitor "$mon"
    done
}

case "${#monitors[@]}" in
    1)
        lock_tag_to_monitor 0 {0..9}
        ;;
    2)
        case "$(hostname)" in
            tolaria)
                lock_tag_to_monitor 0 {4..9}
                lock_tag_to_monitor 1 {0..3}
                ;;
            weatherlight)
                lock_tag_to_monitor 0 {0..6}
                lock_tag_to_monitor 1 {7..9}
                ;;
            3QWP3T3)
                lock_tag_to_monitor 0 {0..1}
                lock_tag_to_monitor 1 {2..9}
                ;;
            *)
                lock_tag_to_monitor 0 {0..7}
                lock_tag_to_monitor 1 {8..9}
                ;;
        esac
        ;;
    3)
        lock_tag_to_monitor 0 {0..2}
        lock_tag_to_monitor 1 {3..6}
        lock_tag_to_monitor 2 {7..9}
        ;;
    4)
        lock_tag_to_monitor 0 0
        lock_tag_to_monitor 1 {1..3}
        lock_tag_to_monitor 2 {4..6}
        lock_tag_to_monitor 3 {7..9}
        ;;
esac

if pgrep -u "$LOGNAME" sxhkd; then
    pkill -SIGUSR1 sxhkd
else
    daemonise sxhkd -m -1 -r "$CACHE_DIR/sxhkd.log" -s "$CACHE_DIR/sxhkd.fifo"
fi

bar_args=()
i=0
for mon in "${monitors[@]}"; do
    bar_height=$(( extra_height + 22 ))
    $hc pad "$((i++))" "$bar_height" 0 0 0
    bar_args+=('--output' "${mon}")
done
unset i

bar_args+=(--height "$bar_height")
if [[ "$resolution" != 4K ]]; then
    bar_args+=(--font "Hack: size=9" --font "Noto Sans Mono CJK JP: size=7")
fi

pkill lemon
RUST_LOG=debug daemonise lemon "${bar_args[@]}" &>"$CACHE_DIR/lemonbar.log"


# unlock, just to be sure
$hc unlock

set +x
retries=0
sleep 1.5
until bar_id=$(xdo id -a 'bar_of_the_lemons') || [[ "$retries" = 1000 ]]; do
    sleep 0.001
    ((retries++))
done
for bar in $bar_id; do
    xdo below -t "$(xdo id -n root)" "$bar"
done
